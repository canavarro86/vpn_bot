import asyncio
import logging
import os
import sqlite3
import subprocess
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

DB_PATH = "base/vpn_users.db"
conn = sqlite3.connect(DB_PATH)
cursor = conn.cursor()

FREE_TARIFF = {
    "traffic_limit_mb": 10240,  # 10GB
    "duration_days": 30
}

GENERATE_SCRIPT = "/opt/tg-bot/generate_user_config.sh"
CLEANING_SCRIPT = "/opt/tg-bot/clean_ovpn.sh"
CONFIG_DIR = "/etc/openvpn/client"

HELP_GUIDES = {
    "iPhone": "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ OpenVPN Connect –∏–∑ App Store.\n2. –ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .ovpn –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø–æ—á—Ç—É, –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –∏–ª–∏ iCloud.\n3. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ OpenVPN Connect –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ.\n4. –í–∫–ª—é—á–∏—Ç–µ VPN, –Ω–∞–∂–∞–≤ 'Connect'.",
    "Android": "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ OpenVPN Connect –∏–∑ Google Play.\n2. –ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .ovpn –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø–æ—á—Ç—É, –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –∏–ª–∏ Google Drive.\n3. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ OpenVPN Connect –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ.\n4. –ù–∞–∂–º–∏—Ç–µ 'Connect', —á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.",
    "Windows": "1. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç OpenVPN —Å —Å–∞–π—Ç–∞ openvpn.net.\n2. –ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .ovpn –≤ –ø–∞–ø–∫—É C:\\Program Files\\OpenVPN\\config.\n3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ OpenVPN GUI –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n4. –ù–∞–π–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞–∂–º–∏—Ç–µ 'Connect'.",
    "Linux": "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ OpenVPN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (sudo apt install openvpn).\n2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: sudo openvpn --config /path/to/your/config.ovpn.\n3. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è.\n4. VPN –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª.",
    "MacOS": "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Tunnelblick –∏–∑ Mac App Store –∏–ª–∏ —Å —Å–∞–π—Ç–∞ tunnelblick.net.\n2. –ü–µ—Ä–µ–Ω–µ—Å–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .ovpn –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.\n3. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ Tunnelblick –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ.\n4. –ù–∞–∂–º–∏—Ç–µ 'Connect', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É."
}

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    welcome_message = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HideWay VPN! \n"
        "üîí –ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É!"
        "–ú—ã –Ω–µ –≤–µ–¥—ë–º –ª–æ–≥–æ–≤, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –≤–∞—à—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å."
        "üìç –î–æ—Å—Ç—É–ø–Ω—ã —Å–µ—Ä–≤–µ—Ä—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö:"
        "üá∫üá∏ –°–®–ê  üá®üá¶ –ö–∞–Ω–∞–¥–∞  üáØüáµ –Ø–ø–æ–Ω–∏—è  üá¨üá≥ –ì–≤–∏–Ω–µ—è  üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è  üá¶üá∫ –ê–≤—Å—Ç—Ä–∞–ª–∏—è"
        "–∏ –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ!"
        "üöÄ –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö. \n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏–ª–∏ /getconfig –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª–∞."
    )
    await message.answer(welcome_message)

@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=device, callback_data=f"help_{device}")]
            for device in HELP_GUIDES.keys()
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é:", reply_markup=keyboard)

@dp.callback_query()
async def help_callback(query: types.CallbackQuery):
    device = query.data.replace("help_", "")
    if device in HELP_GUIDES:
        await query.message.answer(f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è {device}:\n{HELP_GUIDES[device]}")
    else:
        await query.message.answer("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await query.answer()

@dp.message(Command("getconfig"))
async def get_config_cmd(message: types.Message):
    telegram_id = message.from_user.id
    try:
        cursor.execute("SELECT tariff, config_path FROM users WHERE telegram_id=?", (telegram_id,))
        user = cursor.fetchone()

        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
            return

        tariff, config_path = user
        if not config_path or not os.path.exists(config_path):
            config_path = f"{CONFIG_DIR}/user_{telegram_id}.ovpn"
            result = subprocess.run([GENERATE_SCRIPT, f"user_{telegram_id}"], capture_output=True, text=True)
            if result.returncode == 0:
                cursor.execute("UPDATE users SET config_path=? WHERE telegram_id=?", (config_path, telegram_id))
                conn.commit()
                logger.info(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {config_path}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {result.stderr}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

        try:
            file_to_send = FSInputFile(config_path)
            await message.answer_document(file_to_send, caption="–í–æ—Ç –≤–∞—à –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è VPN.")
            logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {config_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {e}")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /getconfig –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
